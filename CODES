rm -f a.out
gcc -g AST.c Builtins.c Codegen.c Compile.c Context.c DataStructures.c Error.c Interpreter.c InterpreterHelpers.c Mem.c Parse.c /usr/lib/x86_64-linux-gnu/libm.so -o a.out
./a.out
*** PRINTING LEXEMES ***
1) TOKEN:: DEF, LEXEME:: def
2) TOKEN:: IDENTIFIER, LEXEME:: forEach
3) TOKEN:: LEFTPARENTH, LEXEME:: (
4) TOKEN:: IDENTIFIER, LEXEME:: array
5) TOKEN:: COMMA, LEXEME:: ,
6) TOKEN:: IDENTIFIER, LEXEME:: function
7) TOKEN:: RIGHTPARENTH, LEXEME:: )
8) TOKEN:: OPENBRACE, LEXEME:: {
9) TOKEN:: ENDLINE, LEXEME:: 

10) TOKEN:: FOR, LEXEME:: for
11) TOKEN:: LEFTPARENTH, LEXEME:: (
12) TOKEN:: IDENTIFIER, LEXEME:: i
13) TOKEN:: ASSIGNMENT, LEXEME:: =
14) TOKEN:: NUM, LEXEME:: 0
15) TOKEN:: SEMICOLON, LEXEME:: ;
16) TOKEN:: IDENTIFIER, LEXEME:: i
17) TOKEN:: LESSTHAN, LEXEME:: <
18) TOKEN:: IDENTIFIER, LEXEME:: array
19) TOKEN:: DOTOP, LEXEME:: .
20) TOKEN:: IDENTIFIER, LEXEME:: size
21) TOKEN:: LEFTPARENTH, LEXEME:: (
22) TOKEN:: RIGHTPARENTH, LEXEME:: )
23) TOKEN:: SEMICOLON, LEXEME:: ;
24) TOKEN:: IDENTIFIER, LEXEME:: i
25) TOKEN:: ASSIGNMENT, LEXEME:: =
26) TOKEN:: IDENTIFIER, LEXEME:: i
27) TOKEN:: ADD, LEXEME:: +
28) TOKEN:: NUM, LEXEME:: 1
29) TOKEN:: RIGHTPARENTH, LEXEME:: )
30) TOKEN:: ENDLINE, LEXEME:: 

31) TOKEN:: IDENTIFIER, LEXEME:: function
32) TOKEN:: LEFTPARENTH, LEXEME:: (
33) TOKEN:: IDENTIFIER, LEXEME:: array
34) TOKEN:: OPENBRACKET, LEXEME:: [
35) TOKEN:: IDENTIFIER, LEXEME:: i
36) TOKEN:: CLOSEBRACKET, LEXEME:: ]
37) TOKEN:: RIGHTPARENTH, LEXEME:: )
38) TOKEN:: ENDLINE, LEXEME:: 

39) TOKEN:: CLOSEBRACE, LEXEME:: }
40) TOKEN:: ENDLINE, LEXEME:: 

41) TOKEN:: ENDLINE, LEXEME:: 

42) TOKEN:: DEF, LEXEME:: def
43) TOKEN:: IDENTIFIER, LEXEME:: map
44) TOKEN:: LEFTPARENTH, LEXEME:: (
45) TOKEN:: IDENTIFIER, LEXEME:: array
46) TOKEN:: COMMA, LEXEME:: ,
47) TOKEN:: IDENTIFIER, LEXEME:: function
48) TOKEN:: RIGHTPARENTH, LEXEME:: )
49) TOKEN:: OPENBRACE, LEXEME:: {
50) TOKEN:: ENDLINE, LEXEME:: 

51) TOKEN:: IDENTIFIER, LEXEME:: retList
52) TOKEN:: ASSIGNMENT, LEXEME:: =
53) TOKEN:: OPENBRACKET, LEXEME:: [
54) TOKEN:: CLOSEBRACKET, LEXEME:: ]
55) TOKEN:: ENDLINE, LEXEME:: 

56) TOKEN:: FOR, LEXEME:: for
57) TOKEN:: LEFTPARENTH, LEXEME:: (
58) TOKEN:: IDENTIFIER, LEXEME:: i
59) TOKEN:: ASSIGNMENT, LEXEME:: =
60) TOKEN:: NUM, LEXEME:: 0
61) TOKEN:: SEMICOLON, LEXEME:: ;
62) TOKEN:: IDENTIFIER, LEXEME:: i
63) TOKEN:: LESSTHAN, LEXEME:: <
64) TOKEN:: IDENTIFIER, LEXEME:: array
65) TOKEN:: DOTOP, LEXEME:: .
66) TOKEN:: IDENTIFIER, LEXEME:: size
67) TOKEN:: LEFTPARENTH, LEXEME:: (
68) TOKEN:: RIGHTPARENTH, LEXEME:: )
69) TOKEN:: SEMICOLON, LEXEME:: ;
70) TOKEN:: IDENTIFIER, LEXEME:: i
71) TOKEN:: ASSIGNMENT, LEXEME:: =
72) TOKEN:: IDENTIFIER, LEXEME:: i
73) TOKEN:: ADD, LEXEME:: +
74) TOKEN:: NUM, LEXEME:: 1
75) TOKEN:: RIGHTPARENTH, LEXEME:: )
76) TOKEN:: ENDLINE, LEXEME:: 

77) TOKEN:: IDENTIFIER, LEXEME:: retList
78) TOKEN:: DOTOP, LEXEME:: .
79) TOKEN:: IDENTIFIER, LEXEME:: append
80) TOKEN:: LEFTPARENTH, LEXEME:: (
81) TOKEN:: IDENTIFIER, LEXEME:: function
82) TOKEN:: LEFTPARENTH, LEXEME:: (
83) TOKEN:: IDENTIFIER, LEXEME:: array
84) TOKEN:: OPENBRACKET, LEXEME:: [
85) TOKEN:: IDENTIFIER, LEXEME:: i
86) TOKEN:: CLOSEBRACKET, LEXEME:: ]
87) TOKEN:: RIGHTPARENTH, LEXEME:: )
88) TOKEN:: RIGHTPARENTH, LEXEME:: )
89) TOKEN:: ENDLINE, LEXEME:: 

90) TOKEN:: RETURN, LEXEME:: return
91) TOKEN:: IDENTIFIER, LEXEME:: retList
92) TOKEN:: ENDLINE, LEXEME:: 

93) TOKEN:: CLOSEBRACE, LEXEME:: }
94) TOKEN:: ENDLINE, LEXEME:: 

95) TOKEN:: ENDLINE, LEXEME:: 

96) TOKEN:: DEF, LEXEME:: def
97) TOKEN:: IDENTIFIER, LEXEME:: filter
98) TOKEN:: LEFTPARENTH, LEXEME:: (
99) TOKEN:: IDENTIFIER, LEXEME:: array
100) TOKEN:: COMMA, LEXEME:: ,
101) TOKEN:: IDENTIFIER, LEXEME:: function
102) TOKEN:: RIGHTPARENTH, LEXEME:: )
103) TOKEN:: OPENBRACE, LEXEME:: {
104) TOKEN:: ENDLINE, LEXEME:: 

105) TOKEN:: IDENTIFIER, LEXEME:: retList
106) TOKEN:: ASSIGNMENT, LEXEME:: =
107) TOKEN:: OPENBRACKET, LEXEME:: [
108) TOKEN:: CLOSEBRACKET, LEXEME:: ]
109) TOKEN:: ENDLINE, LEXEME:: 

110) TOKEN:: FOR, LEXEME:: for
111) TOKEN:: LEFTPARENTH, LEXEME:: (
112) TOKEN:: IDENTIFIER, LEXEME:: i
113) TOKEN:: ASSIGNMENT, LEXEME:: =
114) TOKEN:: NUM, LEXEME:: 0
115) TOKEN:: SEMICOLON, LEXEME:: ;
116) TOKEN:: IDENTIFIER, LEXEME:: i
117) TOKEN:: LESSTHAN, LEXEME:: <
118) TOKEN:: IDENTIFIER, LEXEME:: array
119) TOKEN:: DOTOP, LEXEME:: .
120) TOKEN:: IDENTIFIER, LEXEME:: size
121) TOKEN:: LEFTPARENTH, LEXEME:: (
122) TOKEN:: RIGHTPARENTH, LEXEME:: )
123) TOKEN:: SEMICOLON, LEXEME:: ;
124) TOKEN:: IDENTIFIER, LEXEME:: i
125) TOKEN:: ASSIGNMENT, LEXEME:: =
126) TOKEN:: IDENTIFIER, LEXEME:: i
127) TOKEN:: ADD, LEXEME:: +
128) TOKEN:: NUM, LEXEME:: 1
129) TOKEN:: RIGHTPARENTH, LEXEME:: )
130) TOKEN:: OPENBRACE, LEXEME:: {
131) TOKEN:: ENDLINE, LEXEME:: 

132) TOKEN:: IDENTIFIER, LEXEME:: store
133) TOKEN:: ASSIGNMENT, LEXEME:: =
134) TOKEN:: IDENTIFIER, LEXEME:: function
135) TOKEN:: LEFTPARENTH, LEXEME:: (
136) TOKEN:: IDENTIFIER, LEXEME:: array
137) TOKEN:: OPENBRACKET, LEXEME:: [
138) TOKEN:: IDENTIFIER, LEXEME:: i
139) TOKEN:: CLOSEBRACKET, LEXEME:: ]
140) TOKEN:: RIGHTPARENTH, LEXEME:: )
141) TOKEN:: ENDLINE, LEXEME:: 

142) TOKEN:: IF, LEXEME:: if
143) TOKEN:: LEFTPARENTH, LEXEME:: (
144) TOKEN:: IDENTIFIER, LEXEME:: store
145) TOKEN:: RIGHTPARENTH, LEXEME:: )
146) TOKEN:: ENDLINE, LEXEME:: 

147) TOKEN:: IDENTIFIER, LEXEME:: retList
148) TOKEN:: DOTOP, LEXEME:: .
149) TOKEN:: IDENTIFIER, LEXEME:: append
150) TOKEN:: LEFTPARENTH, LEXEME:: (
151) TOKEN:: IDENTIFIER, LEXEME:: store
152) TOKEN:: RIGHTPARENTH, LEXEME:: )
153) TOKEN:: ENDLINE, LEXEME:: 

154) TOKEN:: CLOSEBRACE, LEXEME:: }
155) TOKEN:: ENDLINE, LEXEME:: 

156) TOKEN:: RETURN, LEXEME:: return
157) TOKEN:: IDENTIFIER, LEXEME:: retList
158) TOKEN:: ENDLINE, LEXEME:: 

159) TOKEN:: CLOSEBRACE, LEXEME:: }
160) TOKEN:: ENDLINE, LEXEME:: 

161) TOKEN:: ENDLINE, LEXEME:: 

162) TOKEN:: OPENBRACKET, LEXEME:: [
163) TOKEN:: NUM, LEXEME:: 1
164) TOKEN:: COMMA, LEXEME:: ,
165) TOKEN:: NUM, LEXEME:: 2
166) TOKEN:: COMMA, LEXEME:: ,
167) TOKEN:: NUM, LEXEME:: 3
168) TOKEN:: CLOSEBRACKET, LEXEME:: ]
169) TOKEN:: DOTOP, LEXEME:: .
170) TOKEN:: IDENTIFIER, LEXEME:: forEach
171) TOKEN:: LEFTPARENTH, LEXEME:: (
172) TOKEN:: LEFTPARENTH, LEXEME:: (
173) TOKEN:: IDENTIFIER, LEXEME:: e
174) TOKEN:: RIGHTPARENTH, LEXEME:: )
175) TOKEN:: ASSIGNMENT, LEXEME:: =
176) TOKEN:: GREATERTHAN, LEXEME:: >
177) TOKEN:: OPENBRACE, LEXEME:: {
178) TOKEN:: IDENTIFIER, LEXEME:: echo
179) TOKEN:: LEFTPARENTH, LEXEME:: (
180) TOKEN:: IDENTIFIER, LEXEME:: e
181) TOKEN:: RIGHTPARENTH, LEXEME:: )
182) TOKEN:: CLOSEBRACE, LEXEME:: }
183) TOKEN:: RIGHTPARENTH, LEXEME:: )
184) TOKEN:: ENDOFFILE, LEXEME:: END
*** FINISHED PRINTING LEXEMES ***
*** PRINTING AST ***
<NOINFO>
  DEF : def : 0x56165a520c50
    IDENTIFIER : forEach : 0x56165a520ca0
      IDENTIFIER : array : 0x56165a520cf0
      IDENTIFIER : function : 0x56165a520d40
      OPENBRACE : { : 0x56165a520d90
        FOR : for : 0x56165a520de0
          PSUEDOTOKEN : 0x56165a520e30
            ASSIGNMENT : = : 0x56165a520ed0
              IDENTIFIER : i : 0x56165a520e80
              NUM : 0 : 0x56165a520f20
          PSUEDOTOKEN : 0x56165a520f70
            LESSTHAN : < : 0x56165a521010
              IDENTIFIER : i : 0x56165a520fc0
              DOTOP : . : 0x56165a5210b0
                IDENTIFIER : array : 0x56165a521060
                FUNCTIONCALLIDENT : size : 0x56165a521100
          OPENBRACE : 
 : 0x56165a521330
            PSUEDOTOKEN : 0x56165a521380
              FUNCTIONCALLIDENT : function : 0x56165a5213d0
                PSUEDOTOKEN : 0x56165a521420
                  INDEXIDENT : array : 0x56165a521470
                    OPENBRACKET : [ : 0x56165a5226b0
                      PSUEDOTOKEN : 0x56165a522700
                        IDENTIFIER : i : 0x56165a522750
            PSUEDOTOKEN : 0x56165a521150
              ASSIGNMENT : = : 0x56165a5211f0
                IDENTIFIER : i : 0x56165a5211a0
                ADD : + : 0x56165a521290
                  IDENTIFIER : i : 0x56165a521240
                  NUM : 1 : 0x56165a5212e0
  DEF : def : 0x56165a5227a0
    IDENTIFIER : map : 0x56165a5227f0
      IDENTIFIER : array : 0x56165a522840
      IDENTIFIER : function : 0x56165a522890
      OPENBRACE : { : 0x56165a5228e0
        PSUEDOTOKEN : 0x56165a522930
          ASSIGNMENT : = : 0x56165a5229d0
            IDENTIFIER : retList : 0x56165a522980
            OPENBRACKET : [ : 0x56165a522a20
        FOR : for : 0x56165a522a70
          PSUEDOTOKEN : 0x56165a522ac0
            ASSIGNMENT : = : 0x56165a522b60
              IDENTIFIER : i : 0x56165a522b10
              NUM : 0 : 0x56165a522bb0
          PSUEDOTOKEN : 0x56165a522c00
            LESSTHAN : < : 0x56165a522ca0
              IDENTIFIER : i : 0x56165a522c50
              DOTOP : . : 0x56165a522d40
                IDENTIFIER : array : 0x56165a522cf0
                FUNCTIONCALLIDENT : size : 0x56165a522d90
          OPENBRACE : 
 : 0x56165a522fc0
            PSUEDOTOKEN : 0x56165a523010
              DOTOP : . : 0x56165a5230b0
                IDENTIFIER : retList : 0x56165a523060
                FUNCTIONCALLIDENT : append : 0x56165a523100
                  PSUEDOTOKEN : 0x56165a523150
                    FUNCTIONCALLIDENT : function : 0x56165a5231a0
                      PSUEDOTOKEN : 0x56165a5231f0
                        INDEXIDENT : array : 0x56165a523240
                          OPENBRACKET : [ : 0x56165a523290
                            PSUEDOTOKEN : 0x56165a5232e0
                              IDENTIFIER : i : 0x56165a523330
            PSUEDOTOKEN : 0x56165a522de0
              ASSIGNMENT : = : 0x56165a522e80
                IDENTIFIER : i : 0x56165a522e30
                ADD : + : 0x56165a522f20
                  IDENTIFIER : i : 0x56165a522ed0
                  NUM : 1 : 0x56165a522f70
        RETURN : return : 0x56165a523380
          PSUEDOTOKEN : 0x56165a5233d0
            IDENTIFIER : retList : 0x56165a523420
  DEF : def : 0x56165a523470
    IDENTIFIER : filter : 0x56165a5234c0
      IDENTIFIER : array : 0x56165a523510
      IDENTIFIER : function : 0x56165a523560
      OPENBRACE : { : 0x56165a5235b0
        PSUEDOTOKEN : 0x56165a523600
          ASSIGNMENT : = : 0x56165a5236a0
            IDENTIFIER : retList : 0x56165a523650
            OPENBRACKET : [ : 0x56165a5236f0
        FOR : for : 0x56165a523740
          PSUEDOTOKEN : 0x56165a523790
            ASSIGNMENT : = : 0x56165a523830
              IDENTIFIER : i : 0x56165a5237e0
              NUM : 0 : 0x56165a523880
          PSUEDOTOKEN : 0x56165a5238d0
            LESSTHAN : < : 0x56165a523970
              IDENTIFIER : i : 0x56165a523920
              DOTOP : . : 0x56165a523a10
                IDENTIFIER : array : 0x56165a5239c0
                FUNCTIONCALLIDENT : size : 0x56165a523a60
          OPENBRACE : { : 0x56165a523c90
            PSUEDOTOKEN : 0x56165a523ce0
              ASSIGNMENT : = : 0x56165a523d80
                IDENTIFIER : store : 0x56165a523d30
                FUNCTIONCALLIDENT : function : 0x56165a523dd0
                  PSUEDOTOKEN : 0x56165a523e20
                    INDEXIDENT : array : 0x56165a523e70
                      OPENBRACKET : [ : 0x56165a523ec0
                        PSUEDOTOKEN : 0x56165a523f10
                          IDENTIFIER : i : 0x56165a523f60
            IF : if : 0x56165a523fb0
              PSUEDOTOKEN : 0x56165a524000
                IDENTIFIER : store : 0x56165a524050
              OPENBRACE : 
 : 0x56165a5240a0
                PSUEDOTOKEN : 0x56165a5240f0
                  DOTOP : . : 0x56165a524190
                    IDENTIFIER : retList : 0x56165a524140
                    FUNCTIONCALLIDENT : append : 0x56165a5241e0
                      PSUEDOTOKEN : 0x56165a524230
                        IDENTIFIER : store : 0x56165a524280
            PSUEDOTOKEN : 0x56165a523ab0
              ASSIGNMENT : = : 0x56165a523b50
                IDENTIFIER : i : 0x56165a523b00
                ADD : + : 0x56165a523bf0
                  IDENTIFIER : i : 0x56165a523ba0
                  NUM : 1 : 0x56165a523c40
        RETURN : return : 0x56165a5242d0
          PSUEDOTOKEN : 0x56165a524320
            IDENTIFIER : retList : 0x56165a524370
  PSUEDOTOKEN : 0x56165a5243c0
    DOTOP : . : 0x56165a524640
      OPENBRACKET : [ : 0x56165a524410
        PSUEDOTOKEN : 0x56165a524460
          NUM : 1 : 0x56165a5244b0
        PSUEDOTOKEN : 0x56165a524500
          NUM : 2 : 0x56165a524550
        PSUEDOTOKEN : 0x56165a5245a0
          NUM : 3 : 0x56165a5245f0
      FUNCTIONCALLIDENT : forEach : 0x56165a524690
        PSUEDOTOKEN : 0x56165a5246e0
          UNKNOWN : ( : 0x56165a524730
            <NOINFO>
              IDENTIFIER : e : 0x56165a5247d0
              OPENBRACE : { : 0x56165a524820
                PSUEDOTOKEN : 0x56165a524870
                  FUNCTIONCALLIDENT : echo : 0x56165a5248c0
                    PSUEDOTOKEN : 0x56165a524910
                      IDENTIFIER : e : 0x56165a524960
*** FINISHED PRINTING AST ***
*** PRINTING BYTECODES ***
1) JUMP 29.000000
2) PUSHSCOPE
3) PUSH function
4) ASSIGNF =
5) PUSH array
6) ASSIGNF =
7) PUSH i
8) PUSH 0.000000
9) BINOP =
10) PUSHLOOKUP i
11) STACKFRAME
12) PUSHLOOKUP array
13) CALL size
14) BINOP <
15) JUMPNE 28.000000
16) STACKFRAME
17) PUSHLOOKUP array
18) PUSHLOOKUP i
19) PUSHOFFSET
20) CALL function
21) POPCLEAN
22) PUSH i
23) PUSHLOOKUP i
24) PUSH 1.000000
25) BINOP +
26) BINOP =
27) JUMP 10.000000
28) RETURN <NULL>
29) JUMP 65.000000
30) PUSHSCOPE
31) PUSH function
32) ASSIGNF =
33) PUSH array
34) ASSIGNF =
35) PUSH retList
36) BUILDLIST 0.000000
37) BINOP =
38) PUSH i
39) PUSH 0.000000
40) BINOP =
41) PUSHLOOKUP i
42) STACKFRAME
43) PUSHLOOKUP array
44) CALL size
45) BINOP <
46) JUMPNE 62.000000
47) STACKFRAME
48) PUSHLOOKUP retList
49) STACKFRAME
50) PUSHLOOKUP array
51) PUSHLOOKUP i
52) PUSHOFFSET
53) CALL function
54) CALL append
55) POPCLEAN
56) PUSH i
57) PUSHLOOKUP i
58) PUSH 1.000000
59) BINOP +
60) BINOP =
61) JUMP 41.000000
62) PUSHLOOKUP retList
63) RETURN
64) RETURN <NULL>
65) JUMP 106.000000
66) PUSHSCOPE
67) PUSH function
68) ASSIGNF =
69) PUSH array
70) ASSIGNF =
71) PUSH retList
72) BUILDLIST 0.000000
73) BINOP =
74) PUSH i
75) PUSH 0.000000
76) BINOP =
77) PUSHLOOKUP i
78) STACKFRAME
79) PUSHLOOKUP array
80) CALL size
81) BINOP <
82) JUMPNE 103.000000
83) PUSH store
84) STACKFRAME
85) PUSHLOOKUP array
86) PUSHLOOKUP i
87) PUSHOFFSET
88) CALL function
89) BINOP =
90) PUSHLOOKUP store
91) JUMPNE 97.000000
92) STACKFRAME
93) PUSHLOOKUP retList
94) PUSHLOOKUP store
95) CALL append
96) POPCLEAN
97) PUSH i
98) PUSHLOOKUP i
99) PUSH 1.000000
100) BINOP +
101) BINOP =
102) JUMP 77.000000
103) PUSHLOOKUP retList
104) RETURN
105) RETURN <NULL>
106) STACKFRAME
107) PUSH 3.000000
108) PUSH 2.000000
109) PUSH 1.000000
110) BUILDLIST 3.000000
111) PUSH 113.000000
112) JUMP 121.000000
113) PUSHSCOPE
114) PUSH e
115) ASSIGNF =
116) STACKFRAME
117) PUSHLOOKUP e
118) CALL echo
119) POPCLEAN
120) RETURN <NULL>
121) CALL forEach
122) POPCLEAN
123) END
*** END PRINTING BYTECODES ***
1.000000
2.000000
3.000000
